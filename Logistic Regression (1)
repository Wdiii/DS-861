{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>balance</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30</td>\n",
       "      <td>married</td>\n",
       "      <td>primary</td>\n",
       "      <td>no</td>\n",
       "      <td>1787</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>79</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>33</td>\n",
       "      <td>married</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>4789</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>cellular</td>\n",
       "      <td>220</td>\n",
       "      <td>1</td>\n",
       "      <td>339</td>\n",
       "      <td>4</td>\n",
       "      <td>failure</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>35</td>\n",
       "      <td>single</td>\n",
       "      <td>tertiary</td>\n",
       "      <td>no</td>\n",
       "      <td>1350</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>185</td>\n",
       "      <td>1</td>\n",
       "      <td>330</td>\n",
       "      <td>1</td>\n",
       "      <td>failure</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>30</td>\n",
       "      <td>married</td>\n",
       "      <td>tertiary</td>\n",
       "      <td>no</td>\n",
       "      <td>1476</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>unknown</td>\n",
       "      <td>199</td>\n",
       "      <td>4</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>59</td>\n",
       "      <td>married</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>226</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  marital  education default  balance housing loan   contact  duration  \\\n",
       "0   30  married    primary      no     1787      no   no  cellular        79   \n",
       "1   33  married  secondary      no     4789     yes  yes  cellular       220   \n",
       "2   35   single   tertiary      no     1350     yes   no  cellular       185   \n",
       "3   30  married   tertiary      no     1476     yes  yes   unknown       199   \n",
       "4   59  married  secondary      no        0     yes   no   unknown       226   \n",
       "\n",
       "   campaign  pdays  previous poutcome   y  \n",
       "0         1     -1         0  unknown  no  \n",
       "1         1    339         4  failure  no  \n",
       "2         1    330         1  failure  no  \n",
       "3         4     -1         0  unknown  no  \n",
       "4         1     -1         0  unknown  no  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "BankData = pd.read_csv(\"bank.csv\")\n",
    "BankData.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['no' 'yes']\n"
     ]
    }
   ],
   "source": [
    "print(BankData['y'].unique()) #you can use unique if you would like to find out how many unique attributes each variable have"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For dictionary of data please refer to https://archive.ics.uci.edu/ml/datasets/Bank+Marketing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Our goal is to define a model best predicts outcome y - success of the marketing campaign "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First let's create dummy variables for default, marital, housing, and loan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   age  marital  education default  balance housing loan   contact  duration  \\\n",
      "0   30  married    primary      no     1787      no   no  cellular        79   \n",
      "1   33  married  secondary      no     4789     yes  yes  cellular       220   \n",
      "2   35   single   tertiary      no     1350     yes   no  cellular       185   \n",
      "3   30  married   tertiary      no     1476     yes  yes   unknown       199   \n",
      "4   59  married  secondary      no        0     yes   no   unknown       226   \n",
      "\n",
      "   campaign  pdays  previous poutcome   y  marital_single  default_yes  \\\n",
      "0         1     -1         0  unknown  no               0            0   \n",
      "1         1    339         4  failure  no               0            0   \n",
      "2         1    330         1  failure  no               1            0   \n",
      "3         4     -1         0  unknown  no               0            0   \n",
      "4         1     -1         0  unknown  no               0            0   \n",
      "\n",
      "   housing_yes  loan_yes  y_yes  \n",
      "0            0         0      0  \n",
      "1            1         1      0  \n",
      "2            1         0      0  \n",
      "3            1         1      0  \n",
      "4            1         0      0  \n",
      "               age       balance     duration     campaign        pdays  \\\n",
      "count  4521.000000   4521.000000  4521.000000  4521.000000  4521.000000   \n",
      "mean     41.170095   1422.657819   263.961292     2.793630    39.766645   \n",
      "std      10.576211   3009.638142   259.856633     3.109807   100.121124   \n",
      "min      19.000000  -3313.000000     4.000000     1.000000    -1.000000   \n",
      "25%      33.000000     69.000000   104.000000     1.000000    -1.000000   \n",
      "50%      39.000000    444.000000   185.000000     2.000000    -1.000000   \n",
      "75%      49.000000   1480.000000   329.000000     3.000000    -1.000000   \n",
      "max      87.000000  71188.000000  3025.000000    50.000000   871.000000   \n",
      "\n",
      "          previous  marital_single  default_yes  housing_yes     loan_yes  \\\n",
      "count  4521.000000     4521.000000  4521.000000  4521.000000  4521.000000   \n",
      "mean      0.542579        0.264543     0.016810     0.566025     0.152842   \n",
      "std       1.693562        0.441138     0.128575     0.495676     0.359875   \n",
      "min       0.000000        0.000000     0.000000     0.000000     0.000000   \n",
      "25%       0.000000        0.000000     0.000000     0.000000     0.000000   \n",
      "50%       0.000000        0.000000     0.000000     1.000000     0.000000   \n",
      "75%       0.000000        1.000000     0.000000     1.000000     0.000000   \n",
      "max      25.000000        1.000000     1.000000     1.000000     1.000000   \n",
      "\n",
      "             y_yes  \n",
      "count  4521.000000  \n",
      "mean      0.115240  \n",
      "std       0.319347  \n",
      "min       0.000000  \n",
      "25%       0.000000  \n",
      "50%       0.000000  \n",
      "75%       0.000000  \n",
      "max       1.000000  \n"
     ]
    }
   ],
   "source": [
    "Default_dummy  = pd.get_dummies(BankData['default'], prefix = 'default')\n",
    "del Default_dummy['default_no']\n",
    "\n",
    "marital_dummy  = pd.get_dummies(BankData['marital'], prefix = 'marital')\n",
    "del marital_dummy['marital_married']\n",
    "del marital_dummy['marital_divorced']\n",
    "\n",
    "housing_dummy  = pd.get_dummies(BankData['housing'], prefix = 'housing')\n",
    "del housing_dummy['housing_no']\n",
    "\n",
    "loan_dummy = pd.get_dummies(BankData['loan'], prefix = 'loan')\n",
    "del loan_dummy['loan_no']\n",
    "\n",
    "y_dummy = pd.get_dummies(BankData['y'], prefix = 'y')\n",
    "del y_dummy['y_no']\n",
    "\n",
    "\n",
    "\n",
    "BankData = pd.concat([BankData,marital_dummy , Default_dummy, housing_dummy, loan_dummy, y_dummy], axis=1)\n",
    "print(BankData.head())\n",
    "print(BankData.describe())\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "BankData['Intercept'] = 1\n",
    "X1 = BankData[['Intercept','age','balance','duration','campaign','previous','marital_single','default_yes','housing_yes','loan_yes']]\n",
    "y1 = BankData['y_yes']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Task 1: run a logistic regression using statsmodels.api"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "logit = sm.Logit(y1, X1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: inf\n",
      "         Iterations 7\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\discrete\\discrete_model.py:1789: RuntimeWarning: divide by zero encountered in log\n",
      "  return np.sum(np.log(self.cdf(q*np.dot(X,params))))\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\base\\model.py:492: HessianInversionWarning: Inverting hessian failed, no bse or cov_params available\n",
      "  'available', HessianInversionWarning)\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\base\\model.py:492: HessianInversionWarning: Inverting hessian failed, no bse or cov_params available\n",
      "  'available', HessianInversionWarning)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Logit Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>y_yes</td>      <th>  No. Observations:  </th>  <td>  4521</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                 <td>Logit</td>      <th>  Df Residuals:      </th>  <td>  4511</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                 <td>MLE</td>       <th>  Df Model:          </th>  <td>     9</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Wed, 08 Apr 2020</td> <th>  Pseudo R-squ.:     </th>  <td>   inf</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>11:58:53</td>     <th>  Log-Likelihood:    </th> <td>    -inf</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>converged:</th>             <td>True</td>       <th>  LL-Null:           </th> <td>  0.0000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>  LLR p-value:       </th>  <td> 1.000</td> \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "         <td></td>           <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>      <td>   -3.2586</td> <td>    0.279</td> <td>  -11.695</td> <td> 0.000</td> <td>   -3.805</td> <td>   -2.712</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>age</th>            <td>    0.0101</td> <td>    0.005</td> <td>    1.905</td> <td> 0.057</td> <td>   -0.000</td> <td>    0.021</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>balance</th>        <td> 1.182e-05</td> <td> 1.58e-05</td> <td>    0.750</td> <td> 0.453</td> <td>-1.91e-05</td> <td> 4.27e-05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>duration</th>       <td>    0.0038</td> <td>    0.000</td> <td>   20.782</td> <td> 0.000</td> <td>    0.003</td> <td>    0.004</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>campaign</th>       <td>   -0.0910</td> <td>    0.026</td> <td>   -3.488</td> <td> 0.000</td> <td>   -0.142</td> <td>   -0.040</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>previous</th>       <td>    0.1618</td> <td>    0.023</td> <td>    7.062</td> <td> 0.000</td> <td>    0.117</td> <td>    0.207</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>marital_single</th> <td>    0.3140</td> <td>    0.129</td> <td>    2.429</td> <td> 0.015</td> <td>    0.061</td> <td>    0.567</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>default_yes</th>    <td>    0.3459</td> <td>    0.412</td> <td>    0.841</td> <td> 0.401</td> <td>   -0.461</td> <td>    1.152</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>housing_yes</th>    <td>   -0.8404</td> <td>    0.111</td> <td>   -7.549</td> <td> 0.000</td> <td>   -1.059</td> <td>   -0.622</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>loan_yes</th>       <td>   -0.8483</td> <td>    0.185</td> <td>   -4.589</td> <td> 0.000</td> <td>   -1.211</td> <td>   -0.486</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                           Logit Regression Results                           \n",
       "==============================================================================\n",
       "Dep. Variable:                  y_yes   No. Observations:                 4521\n",
       "Model:                          Logit   Df Residuals:                     4511\n",
       "Method:                           MLE   Df Model:                            9\n",
       "Date:                Wed, 08 Apr 2020   Pseudo R-squ.:                     inf\n",
       "Time:                        11:58:53   Log-Likelihood:                   -inf\n",
       "converged:                       True   LL-Null:                        0.0000\n",
       "Covariance Type:            nonrobust   LLR p-value:                     1.000\n",
       "==================================================================================\n",
       "                     coef    std err          z      P>|z|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------\n",
       "Intercept         -3.2586      0.279    -11.695      0.000      -3.805      -2.712\n",
       "age                0.0101      0.005      1.905      0.057      -0.000       0.021\n",
       "balance         1.182e-05   1.58e-05      0.750      0.453   -1.91e-05    4.27e-05\n",
       "duration           0.0038      0.000     20.782      0.000       0.003       0.004\n",
       "campaign          -0.0910      0.026     -3.488      0.000      -0.142      -0.040\n",
       "previous           0.1618      0.023      7.062      0.000       0.117       0.207\n",
       "marital_single     0.3140      0.129      2.429      0.015       0.061       0.567\n",
       "default_yes        0.3459      0.412      0.841      0.401      -0.461       1.152\n",
       "housing_yes       -0.8404      0.111     -7.549      0.000      -1.059      -0.622\n",
       "loan_yes          -0.8483      0.185     -4.589      0.000      -1.211      -0.486\n",
       "==================================================================================\n",
       "\"\"\""
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result = logit.fit()\n",
    "result.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept         1.353409e-31\n",
      "age               5.675845e-02\n",
      "balance           4.530682e-01\n",
      "duration          6.264808e-96\n",
      "campaign          4.872088e-04\n",
      "previous          1.642332e-12\n",
      "marital_single    1.513585e-02\n",
      "default_yes       4.006123e-01\n",
      "housing_yes       4.399535e-14\n",
      "loan_yes          4.461870e-06\n",
      "dtype: float64\n",
      "Intercept        -3.258573\n",
      "age               0.010125\n",
      "balance           0.000012\n",
      "duration          0.003793\n",
      "campaign         -0.090990\n",
      "previous          0.161848\n",
      "marital_single    0.314041\n",
      "default_yes       0.345888\n",
      "housing_yes      -0.840408\n",
      "loan_yes         -0.848283\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(result.pvalues)\n",
    "print(result.params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Task 2: Interpret Campaign, marital_single, housing_yes coefficients."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer: Campaign and housing_yes decrease odds of the output y. But marital_single has positive influence on odds. Keep all the variables same, 1 unit increase in Campaign may drop the odds by 9.09%; change from married to single will add the odds by 31.4%; change from housing no to yes will drop the odds by 84.04%. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Task3: What are your 10-fold cross-validation accuracy using sklearn library and solver = 'liblinear' and solver =  'newton-cg'? (Set max_iter = 50000 if you get a warning.) What do you learn?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = BankData[['age','balance','duration','campaign','previous','marital_single','default_yes','housing_yes','loan_yes']]\n",
    "y = BankData['y'] #This should be categorical - for statsmodels api that shall be 0 and 1 not necessarily '0' and '1'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 5.55591319e-03  1.08684041e-05  3.74562187e-03 -9.61584386e-02\n",
      "   1.58393639e-01  2.72176683e-01  1.65148669e-01 -8.70475337e-01\n",
      "  -8.22735777e-01]]\n",
      "[-2.99495866]\n",
      "0.8882997323643751\n"
     ]
    }
   ],
   "source": [
    "lm1 = LogisticRegression(solver = 'liblinear', max_iter = 50000)\n",
    "lm1.fit(X,y)\n",
    "print(lm1.coef_)\n",
    "print(lm1.intercept_)\n",
    "print(cross_val_score(lm1,X,y,cv=10, scoring = 'accuracy').mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.01764760e-02  1.19323934e-05  3.78719184e-03 -9.10647230e-02\n",
      "   1.61521388e-01  3.11420514e-01  2.92444526e-01 -8.30201697e-01\n",
      "  -8.19487650e-01]]\n",
      "[-3.26359854]\n",
      "0.8885204829162516\n"
     ]
    }
   ],
   "source": [
    "lm2 = LogisticRegression(solver = 'newton-cg', max_iter = 50000)\n",
    "lm2.fit(X,y)\n",
    "print(lm2.coef_)\n",
    "print(lm2.intercept_)\n",
    "print(cross_val_score(lm2,X,y,cv=10, scoring = 'accuracy').mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using different solver may get a different but similar result. In this case, the accuracy rate is high when we use 'newton-cg'."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Construct confusion matrices for logistic regression using solver = 'liblinear' and solver = 'newton-cg'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[3928,   72],\n",
       "       [ 426,   95]], dtype=int64)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_hat1 = lm1.predict(X)\n",
    "confusion_matrix(y, y_hat1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[3923,   77],\n",
       "       [ 427,   94]], dtype=int64)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_hat2 = lm2.predict(X)\n",
    "confusion_matrix(y, y_hat2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### what did we learn from what we observerd in confusion matrices?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer: 3928/3923 is True/True prediction, 95/94 is False/False prediction, which is correct in this case. The incorrect part is 426/427, which is False but we predict it as True, and 72/77, which is True but we predict is as False. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### What is your prediction for a person who is 30 years old, 1000 dollars balance,  with duration = 210 , has been contacted 3 times for this campaign (campaign = 3),  who has previously been contacted 4 times, who is single, never defaulted, home owner and doesn't have any loan?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['no']\n",
      "[[0.90862424 0.09137576]]\n"
     ]
    }
   ],
   "source": [
    "x3 = [[30,1000,210,3,4,1,0,1,0]]\n",
    "print(lm2.predict(x3))  #It is more likely that y will be no.\n",
    "print(lm2.predict_proba(x3)) #the probility of y=no is 90.86%."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Now standardize your data - you can use standardization method used for KNN algorithms."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Standardize(X):\n",
    "    X_Max = X.max()\n",
    "    X_Min = X.min()\n",
    "    X_Standardized = (X-X_Min)/(X_Max - X_Min)\n",
    "    return X_Standardized\n",
    "\n",
    "BankData['age_SD'] = Standardize(BankData.age)\n",
    "BankData['balance_SD'] = Standardize(BankData.balance)\n",
    "BankData['duration_SD'] = Standardize(BankData.duration)\n",
    "BankData['campaign_SD'] = Standardize(BankData.campaign)\n",
    "BankData['previous_SD'] =  Standardize(BankData.previous)\n",
    "\n",
    "y = BankData['y'] \n",
    "X = BankData[['age_SD','balance_SD','duration_SD','campaign_SD','previous_SD',\n",
    "              'marital_single','default_yes','housing_yes','loan_yes']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Use 10-fold cross validation to find the best tuning parameter - C. Use 'liblinear' and l1 penalty"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Our optimal C is 1.000000\n",
      "Our accuracy at optimal C is 0.889848\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "# Try testing and plot\n",
    "c_list = np.logspace(-10,10,21) \n",
    "c_index = np.linspace(-10,10,21)\n",
    "#C is just the inverse of Lambda - the smaller the C - the stronger the\n",
    "#regulatization. The smaller C's choose less variables\n",
    "cv_scores = []\n",
    "for c_score in c_list:\n",
    "    lm = LogisticRegression(C = c_score,  solver = 'liblinear', max_iter  = 50000, penalty = 'l1')\n",
    "    cv_scores.append(cross_val_score(lm, X, y,cv = 10, scoring = 'accuracy').mean())\n",
    "\n",
    "plt.plot(c_index, cv_scores)\n",
    "plt.show()\n",
    "\n",
    "print(\"Our optimal C is %f\" %c_list[np.argmax(cv_scores)])   \n",
    "print(\"Our accuracy at optimal C is %f\" %np.max(cv_scores))\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Localize your search around the value you found above"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Our optimal C is 0.257576\n",
      "Our accuracy at optimal C is 0.890513\n"
     ]
    }
   ],
   "source": [
    "### You can localize your search once you have an idea of where to search for the optimal solution\n",
    "\n",
    "c_list = np.linspace(0.1,4,100) \n",
    "cv_scores = []\n",
    "for c_score in c_list:\n",
    "    lm = LogisticRegression(C = c_score,  solver = 'liblinear', max_iter  = 50000, penalty = 'l1')\n",
    "    cv_scores.append(cross_val_score(lm, X, y,cv = 10, scoring = 'accuracy').mean())\n",
    "\n",
    "plt.plot(c_list, cv_scores)\n",
    "plt.show()\n",
    "\n",
    "print(\"Our optimal C is %f\" %c_list[np.argmax(cv_scores)])   \n",
    "print(\"Our accuracy at optimal C is %f\" %np.max(cv_scores))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Now use the best C you found above and repeat your analysis and check your coefficients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0.0407836   0.         10.06346145 -0.1541375   2.81585963  0.15391273\n",
      "   0.         -0.8132101  -0.74469598]]\n"
     ]
    }
   ],
   "source": [
    "lm = LogisticRegression(C = 0.257576,  solver = 'liblinear', max_iter  = 50000, penalty = 'l1')\n",
    "lm.fit(X,y)\n",
    "print(lm.coef_)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### If you would like to drop 2 variables from your analysis, which variables are you going to choose?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer: We can drop 'balance' and 'default_yes'. We can see that they are shrunk to zero."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Compare the results you found out above with p-values of statsmodels api. Do you have same story there? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Answer: "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see the z score from Statsmodel, both balance and default_yes are close to zero."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
